
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 22 10:07:34 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 22 10:07:34 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\004\007\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\007\004\000\002\010\003\000\002\011\005\000\002\012" +
    "\005\000\002\012\004\000\002\013\006\000\002\014\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\006\000\002\017\005\000\002\020\005\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\022\014\000\002\023\007\000\002\023" +
    "\011\000\002\024\006\000\002\036\002\000\002\025\011" +
    "\000\002\037\002\000\002\025\006\000\002\026\004\000" +
    "\002\027\004\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\006\000\002\035\003" +
    "\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\012\010\015\016\005\017\004\020\010\001" +
    "\002\000\004\021\ufffa\001\002\000\004\021\ufff9\001\002" +
    "\000\004\002\ufff4\001\002\000\012\010\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\001\002\000\004\021\ufff8\001\002\000\004" +
    "\002\214\001\002\000\004\002\uffff\001\002\000\012\010" +
    "\015\016\005\017\004\020\010\001\002\000\004\021\176" +
    "\001\002\000\026\003\032\004\025\007\036\012\037\014" +
    "\017\015\027\016\034\017\020\021\030\046\021\001\002" +
    "\000\004\044\uffe3\001\002\000\004\021\175\001\002\000" +
    "\004\021\uffea\001\002\000\012\003\056\021\055\022\050" +
    "\042\061\001\002\000\004\044\uffde\001\002\000\004\021" +
    "\163\001\002\000\004\044\uffe0\001\002\000\012\003\056" +
    "\021\055\022\050\042\061\001\002\000\004\044\uffdd\001" +
    "\002\000\012\003\056\021\055\022\050\042\061\001\002" +
    "\000\010\023\uffd4\040\141\042\116\001\002\000\030\003" +
    "\032\004\025\007\036\011\152\012\037\014\017\015\027" +
    "\016\034\017\020\021\030\046\021\001\002\000\004\044" +
    "\uffdb\001\002\000\004\044\uffe4\001\002\000\004\021\uffe9" +
    "\001\002\000\004\044\uffdf\001\002\000\004\042\127\001" +
    "\002\000\026\003\032\004\025\007\036\012\037\014\017" +
    "\015\027\016\034\017\020\021\030\046\021\001\002\000" +
    "\004\044\uffe1\001\002\000\004\044\043\001\002\000\004" +
    "\044\uffe2\001\002\000\034\003\ufff1\004\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\021\ufff1\046\ufff1\001\002\000\030\003\032\004" +
    "\025\007\036\012\037\013\045\014\017\015\027\016\034" +
    "\017\020\021\030\046\021\001\002\000\012\003\056\021" +
    "\055\022\050\042\061\001\002\000\004\044\047\001\002" +
    "\000\034\003\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2" +
    "\046\ufff2\001\002\000\044\005\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\041\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\001\002\000\044\005\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\103\037\102\041\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\001\002\000\006\025\065\044\uffd7\001\002\000\020\005" +
    "\uffcd\024\uffcd\025\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\001\002\000\020\005\uffcf\024\067\025\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\001\002\000\050\005\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\115\041\uffbb" +
    "\042\116\043\uffbb\044\uffbb\045\uffbb\001\002\000\044\005" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041" +
    "\uffba\043\uffba\044\uffba\045\uffba\001\002\000\044\005\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\001\002\000\040\005\uffc6\024" +
    "\uffc6\025\uffc6\026\072\027\074\030\076\031\075\032\073" +
    "\033\071\034\077\035\100\041\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\001\002\000\012\003\056\021\055\022\050\042\061" +
    "\001\002\000\044\005\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\041\uffbd\043\uffbd\044\uffbd\045\uffbd\001" +
    "\002\000\006\025\065\043\064\001\002\000\044\005\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\001\002\000\012\003\056\021" +
    "\055\022\050\042\061\001\002\000\020\005\uffd0\024\067" +
    "\025\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002\000" +
    "\012\003\056\021\055\022\050\042\061\001\002\000\020" +
    "\005\uffce\024\uffce\025\uffce\041\uffce\043\uffce\044\uffce\045" +
    "\uffce\001\002\000\012\003\056\021\055\022\050\042\061" +
    "\001\002\000\012\003\056\021\055\022\050\042\061\001" +
    "\002\000\012\003\056\021\055\022\050\042\061\001\002" +
    "\000\012\003\056\021\055\022\050\042\061\001\002\000" +
    "\012\003\056\021\055\022\050\042\061\001\002\000\012" +
    "\003\056\021\055\022\050\042\061\001\002\000\012\003" +
    "\056\021\055\022\050\042\061\001\002\000\012\003\056" +
    "\021\055\022\050\042\061\001\002\000\044\005\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\103\037\102\041\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\001\002\000\012\003\056\021\055" +
    "\022\050\042\061\001\002\000\012\003\056\021\055\022" +
    "\050\042\061\001\002\000\044\005\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\001\002\000\044\005\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\041\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\001\002\000\044\005\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\103\037\102\041\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\001\002\000\024\005\uffcc\024\uffcc\025\uffcc\034\077\035" +
    "\100\041\uffcc\043\uffcc\044\uffcc\045\uffcc\001\002\000\024" +
    "\005\uffc9\024\uffc9\025\uffc9\034\077\035\100\041\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\001\002\000\024\005\uffc8\024\uffc8" +
    "\025\uffc8\034\077\035\100\041\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\001\002\000\024\005\uffcb\024\uffcb\025\uffcb\034\077" +
    "\035\100\041\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000" +
    "\024\005\uffc7\024\uffc7\025\uffc7\034\077\035\100\041\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\001\002\000\024\005\uffca\024" +
    "\uffca\025\uffca\034\077\035\100\041\uffca\043\uffca\044\uffca" +
    "\045\uffca\001\002\000\012\003\056\021\055\022\050\042" +
    "\061\001\002\000\014\003\056\021\055\022\050\042\061" +
    "\043\121\001\002\000\010\025\065\043\uffe5\045\uffe5\001" +
    "\002\000\006\043\123\045\122\001\002\000\044\005\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\001\002\000\012\003\056\021" +
    "\055\022\050\042\061\001\002\000\044\005\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\001\002\000\010\025\065\043\uffe6\045" +
    "\uffe6\001\002\000\006\025\065\041\126\001\002\000\044" +
    "\005\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\041\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000\004\021" +
    "\130\001\002\000\006\023\uffd4\040\141\001\002\000\004" +
    "\044\132\001\002\000\012\003\056\021\055\022\050\042" +
    "\061\001\002\000\006\025\065\044\134\001\002\000\004" +
    "\021\130\001\002\000\004\043\136\001\002\000\026\003" +
    "\032\004\025\007\036\012\037\014\017\015\027\016\034" +
    "\017\020\021\030\046\021\001\002\000\030\003\032\004" +
    "\025\007\036\011\140\012\037\014\017\015\027\016\034" +
    "\017\020\021\030\046\021\001\002\000\004\044\uffda\001" +
    "\002\000\012\003\056\021\055\022\050\042\061\001\002" +
    "\000\004\023\143\001\002\000\012\003\056\021\055\022" +
    "\050\042\061\001\002\000\010\025\065\043\uffd3\044\uffd3" +
    "\001\002\000\006\025\065\041\146\001\002\000\004\023" +
    "\uffd6\001\002\000\004\023\150\001\002\000\012\003\056" +
    "\021\055\022\050\042\061\001\002\000\010\025\065\043" +
    "\uffd5\044\uffd5\001\002\000\014\002\ufff3\010\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\001\002\000\006\025\065\044\uffd1\001" +
    "\002\000\006\005\155\025\065\001\002\000\026\003\032" +
    "\004\025\007\036\012\037\014\017\015\027\016\034\017" +
    "\020\021\030\046\021\001\002\000\032\003\032\004\025" +
    "\006\157\007\036\011\160\012\037\014\017\015\027\016" +
    "\034\017\020\021\030\046\021\001\002\000\026\003\032" +
    "\004\025\007\036\012\037\014\017\015\027\016\034\017" +
    "\020\021\030\046\021\001\002\000\004\044\uffd9\001\002" +
    "\000\030\003\032\004\025\007\036\011\162\012\037\014" +
    "\017\015\027\016\034\017\020\021\030\046\021\001\002" +
    "\000\004\044\uffd8\001\002\000\010\040\171\044\uffec\045" +
    "\uffec\001\002\000\006\044\uffeb\045\uffeb\001\002\000\006" +
    "\044\uffef\045\166\001\002\000\004\021\167\001\002\000" +
    "\010\040\171\044\uffee\045\uffee\001\002\000\006\044\uffed" +
    "\045\uffed\001\002\000\004\022\172\001\002\000\004\041" +
    "\173\001\002\000\006\044\ufff0\045\ufff0\001\002\000\006" +
    "\025\065\044\uffdc\001\002\000\004\044\uffd2\001\002\000" +
    "\004\042\177\001\002\000\010\016\034\017\020\043\201" +
    "\001\002\000\006\043\ufff6\045\ufff6\001\002\000\004\010" +
    "\015\001\002\000\006\043\206\045\205\001\002\000\004" +
    "\021\204\001\002\000\006\043\ufff5\045\ufff5\001\002\000" +
    "\006\016\034\017\020\001\002\000\004\010\015\001\002" +
    "\000\012\010\ufffc\016\ufffc\017\ufffc\020\ufffc\001\002\000" +
    "\006\043\ufff7\045\ufff7\001\002\000\012\010\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\001\002\000\012\010\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\016\002\010\003\012\004\006\005\013\010" +
    "\011\011\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\211\005\013" +
    "\010\212\011\005\001\001\000\002\001\001\000\030\012" +
    "\030\014\021\016\022\017\025\021\040\022\041\023\032" +
    "\024\015\025\037\026\023\027\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\061" +
    "\030\173\031\053\032\052\033\057\034\050\035\056\001" +
    "\001\000\002\001\001\000\006\013\163\015\164\001\001" +
    "\000\002\001\001\000\020\017\061\030\153\031\053\032" +
    "\052\033\057\034\050\035\056\001\001\000\002\001\001" +
    "\000\020\017\061\030\152\031\053\032\052\033\057\034" +
    "\050\035\056\001\001\000\004\037\141\001\001\000\026" +
    "\014\021\016\022\017\025\021\045\022\041\023\032\024" +
    "\015\025\037\026\023\027\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\043\014\021\016\022\017\025" +
    "\021\040\022\041\023\032\024\015\025\037\026\023\027" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\021\016\022\017" +
    "\025\021\045\022\041\023\032\024\015\025\037\026\023" +
    "\027\034\001\001\000\020\017\061\030\051\031\053\032" +
    "\052\033\057\034\050\035\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\061\030\062\031\053\032\052\033\057" +
    "\034\050\035\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\061\031\065\032\052" +
    "\033\057\034\050\035\056\001\001\000\002\001\001\000" +
    "\014\017\061\032\067\033\057\034\050\035\056\001\001" +
    "\000\002\001\001\000\012\017\061\033\113\034\050\035" +
    "\056\001\001\000\012\017\061\033\112\034\050\035\056" +
    "\001\001\000\012\017\061\033\111\034\050\035\056\001" +
    "\001\000\012\017\061\033\110\034\050\035\056\001\001" +
    "\000\012\017\061\033\107\034\050\035\056\001\001\000" +
    "\012\017\061\033\106\034\050\035\056\001\001\000\010" +
    "\017\061\034\105\035\056\001\001\000\010\017\061\034" +
    "\100\035\056\001\001\000\002\001\001\000\006\017\061" +
    "\035\104\001\001\000\006\017\061\035\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\061" +
    "\030\124\031\053\032\052\033\057\034\050\035\056\001" +
    "\001\000\022\017\061\020\117\030\116\031\053\032\052" +
    "\033\057\034\050\035\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\017\061\030\123" +
    "\031\053\032\052\033\057\034\050\035\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\130\001\001\000\004\037\141\001" +
    "\001\000\002\001\001\000\020\017\061\030\132\031\053" +
    "\032\052\033\057\034\050\035\056\001\001\000\002\001" +
    "\001\000\004\025\134\001\001\000\002\001\001\000\030" +
    "\012\136\014\021\016\022\017\025\021\040\022\041\023" +
    "\032\024\015\025\037\026\023\027\034\001\001\000\026" +
    "\014\021\016\022\017\025\021\045\022\041\023\032\024" +
    "\015\025\037\026\023\027\034\001\001\000\002\001\001" +
    "\000\020\017\061\030\144\031\053\032\052\033\057\034" +
    "\050\035\056\001\001\000\002\001\001\000\020\017\061" +
    "\030\143\031\053\032\052\033\057\034\050\035\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\146" +
    "\001\001\000\002\001\001\000\020\017\061\030\150\031" +
    "\053\032\052\033\057\034\050\035\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\155\014\021\016\022\017\025\021\040" +
    "\022\041\023\032\024\015\025\037\026\023\027\034\001" +
    "\001\000\026\014\021\016\022\017\025\021\045\022\041" +
    "\023\032\024\015\025\037\026\023\027\034\001\001\000" +
    "\030\012\160\014\021\016\022\017\025\021\040\022\041" +
    "\023\032\024\015\025\037\026\023\027\034\001\001\000" +
    "\002\001\001\000\026\014\021\016\022\017\025\021\045" +
    "\022\041\023\032\024\015\025\037\026\023\027\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\201\007\177\016\202\001\001" +
    "\000\002\001\001\000\004\011\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\207" +
    "\016\202\001\001\000\004\011\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= error 
            {
              NodoBase RESULT =null;
		 
	if(modoDepuracion) System.out.println("\t regla 12d");
	System.out.println("Ocurrio error en cup # 0003");
	
	RESULT=null;
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 12c"); 
	if(variable!=null){
		System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
		RESULT= new NodoIdentificador(variable.toString());
	}else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0005");

	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= ID LCORC exp RCORC 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	RESULT= new NodoIdentificador(var.toString(),ex);	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= llama_fun 
            {
              NodoBase RESULT =null;
		int funexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase funex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = funex;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 12b");
	System.out.println("Devolvi nodo numero entero");
	if(valor!=null){
		RESULT= new NodoValor(valor);		
	}else{
		RESULT = null;

		System.out.println("Ocurrio error en cup # 0005");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if(modoDepuracion) System.out.println("\t regla 12a");
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 11c");
	RESULT=ex;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 11b");
	RESULT = new NodoOperacion(exI,tipoOp.entre,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 11a");
	RESULT = new NodoOperacion(exI,tipoOp.por,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 10c");
	RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 10b");
	RESULT = new NodoOperacion(exI,tipoOp.menos,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 10a");
	RESULT = new NodoOperacion(exI,tipoOp.mas,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp3 ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9c");
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp3 ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9b");
	RESULT = new NodoOperacion(exI,tipoOp.igual,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp3 ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.menor,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp3 ::= simple_exp RT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp3 ::= simple_exp DIF simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp3 ::= simple_exp RTE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp3 ::= simple_exp LTE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp2 ::= exp3 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp2 ::= exp2 AND exp3 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoOperacion(exI,tipoOp.and,exD); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp2 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	RESULT = ex; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OR exp2 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoOperacion(exI,tipoOp.or,exD);  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 8");
		RESULT= new NodoEscribir(ex);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 7"); 
	System.out.println("Leyendo Variable");
	if(variable!=null)
		RESULT = new NodoLeer(variable.toString());
	else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0002");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign_stmt ::= ID NT$1 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 6 parte final");
	if(variable!=null){
	
		RESULT = new NodoAsignacion(variable,ex);
	}else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0001");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if(modoDepuracion) System.out.println("\t regla 6 parte del medio");/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
	String nombre = variable.getName();*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assign_stmt ::= ID LCORC exp RCORC NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 6 parte final");
	if(variable!=null){
		RESULT = new NodoAsignacion(variable,ex);
	}else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0001");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	if(modoDepuracion) System.out.println("\t regla 6 parte del medio");/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
	String nombre = variable.getName();*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 5");
	RESULT = new NodoRepeat(cuerpo,prueba); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if(modoDepuracion) System.out.println("\t regla 4b");
	RESULT = new NodoIf(ex,pthen,pelse);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if(modoDepuracion) System.out.println("\t regla 4a");
	RESULT = new NodoIf(ex,pthen);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // foor ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase asig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase paso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new NodoFor(asig,ex,paso,cuerpo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
	if(modoDepuracion) System.out.println("\t regla 3f");
	System.out.println("Ocurrio error en cup # 0004");
	RESULT=null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETU exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 3e"); 
	RESULT=new NodoReturn(ex);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= llama_fun 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 3e"); 
	RESULT=fun;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= decl 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 3e"); 
	RESULT=dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 3e"); 
	RESULT=sesc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 3d");
	RESULT=slec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 3c");
	RESULT=sasi;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= foor 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 3b"); 
	RESULT=sfor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	if(modoDepuracion) System.out.println("\t regla 3b"); 
	RESULT=srep;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 3a");
	RESULT=sif;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2b");
	RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params ::= params COMA exp 
            {
              NodoBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
	NodoBase hijoActual = p;
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();
		}												hijoActual.setHermanoDerecha(ex);
		RESULT=p;
	}else{
		RESULT=ex;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // llama_fun ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
  	RESULT=new NodoLlamadaFuncion(var.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llama_fun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llama_fun ::= ID LPAREN params RPAREN 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new NodoLlamadaFuncion(var.toString(),p);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llama_fun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tdato ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tdato ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista ::= vector 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase var = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2b");
	RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista ::= ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2b");
	RESULT = new NodoIdentificador(var.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista ::= lista COMA vector 
            {
              NodoBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase l = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase var = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
	NodoBase hijoActual = l;
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();
		}
		hijoActual.setHermanoDerecha(var);
		RESULT=l;
	}else{
		RESULT=var;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista ::= lista COMA ID 
            {
              NodoBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase l = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
	NodoBase hijoActual = l;
	NodoIdentificador nodo = new NodoIdentificador(var.toString());
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();
		}
		hijoActual.setHermanoDerecha(nodo);
		RESULT=l;
	}else{
		RESULT=nodo;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= tdato lista 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase l = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla nueva1");
	RESULT = new NodoDeclaracion(t,l);  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vector ::= ID LCORC NUM RCORC 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
	NodoValor nodo = new NodoValor(val);    
	RESULT = new NodoIdentificador(var.toString(),nodo);      

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_seq ::= stmt SEMI 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(modoDepuracion) System.out.println("\t regla 2b"); 
 	RESULT=sent;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_seq ::= stmt_seq stmt SEMI 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if(modoDepuracion) System.out.println("\t regla 2a");
	NodoBase hijoActual = ini;
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();
		}
		hijoActual.setHermanoDerecha(sent);
		RESULT=ini;
		
	}else{
		RESULT=sent;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	if(modoDepuracion) System.out.println("\t regla 1"); 
	RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cp ::= bloque 
            {
              NodoBase RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arg ::= tdato ID 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       
	NodoIdentificador nodo = new NodoIdentificador(var.toString());
	RESULT = new NodoDeclaracion(t,nodo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // args ::= arg 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla 2b"); 
    RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // args ::= args COMA arg 
            {
              NodoBase RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 2a");
	NodoBase hijoActual = as;
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();
		}
			hijoActual.setHermanoDerecha(a);
			RESULT=as;
		
	}else{
		RESULT=a;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_fun ::= VOID 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_fun ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_fun ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func ::= tipo_fun ID LPAREN RPAREN bloque 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b"); 
	RESULT = new NodoFuncion(t,b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func ::= tipo_fun ID LPAREN args RPAREN bloque 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b") ;
	RESULT = new NodoFuncion(t,a,b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= func 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla 2b"); 
 	   RESULT=f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= funciones func 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 2a");
	NodoBase hijoActual = fun;
	if(hijoActual !=null){
		while(hijoActual.TieneHermano()){
			hijoActual = hijoActual.getHermanoDerecha();		
		}
			hijoActual.setHermanoDerecha(f);
			RESULT=fun;
		}else{
			RESULT=f;
		}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= cp 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(modoDepuracion) System.out.println("\t regla 1"); 
		ast = new NodoPrograma(c);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= funciones cp 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		if(modoDepuracion) System.out.println("\t regla 1"); 
			ast = new NodoPrograma(fun,c);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

