package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal FOR;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal BOOL;
terminal INT;
terminal VOID;
terminal ASSIGN;
terminal AND;
terminal OR;
terminal LTE;
terminal RTE;
terminal DIF;
terminal EQ;
terminal LT;
terminal RT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LCORC;
terminal RCORC;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal COMA;
terminal RETU;


terminal Integer NUM;
terminal String ID;





/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase funciones;
non terminal NodoBase func;
non terminal NodoBase tipo_fun;
non terminal NodoBase args;
non terminal NodoBase arg;
non terminal NodoBase cp;
non terminal NodoBase bloque;
non terminal NodoBase stmt_seq;
non terminal NodoBase vector;
non terminal NodoBase decl;
non terminal NodoBase lista;
non terminal NodoBase tdato;
non terminal NodoBase llama_fun;
non terminal NodoBase params;
non terminal NodoBase stmt;
non terminal NodoBase for;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase exp2;
non terminal NodoBase exp3;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;


/* Precedencia de operadores */
precedence left OR;
precedence left AND;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OVER;


/* REGLAS GRAMATICALES */
program     ::= funciones:fun cp:c	{: 
			if(modoDepuracion) System.out.println("\t regla 1"); 

			ast = new NodoProgama(fun,c);

			:}
	| cp:c {:
	if(modoDepuracion) System.out.println("\t regla 1"); 
		ast = new NodoPrograma(c);
	:};


funciones ::= funciones:fun func:f {:
	if(modoDepuracion) System.out.println("\t regla 2a");
	
NodoBase hijoActual = fun;

	if(hijoActual !=null){

		while(hijoActual.TieneHermano()){

		hijoActual = hijoActual.getHermanoDerecha();
		hijoActual.setHermanoDerecha(f);
		RESULT=fun;

		}
	else{

	RESULT=f;
	
	}
:}
	      | func:f {:if(modoDepuracion) System.out.println("\t regla 2b"); 
 
	   RESULT=f;
	
:};

func ::= tipo_fun:t ID LPAREN args:a RPAREN bloque:b {: if(modoDepuracion) System.out.println("\t regla 2b") 
							RESULT = new NodoFuncion(t,a,b);
							 :} 		

 	| tipo_fun:t ID LPAREN RPAREN bloque:b	{: if(modoDepuracion) System.out.println("\t regla 2b") 
							RESULT = new NodoFuncion(t,b);
							 :} 

tipo_fun ::= INT  {: RESULT = "int"; :}  | BOOL  {: RESULT = "bool"; :}  | VOID  {: RESULT = "void"; :}; 

args ::= args:as COMA arg:a {:
	if(modoDepuracion) System.out.println("\t regla 2a");
	
NodoBase hijoActual = as;

	if(hijoActual !=null){

		while(hijoActual.TieneHermano()){

		hijoActual = hijoActual.getHermanoDerecha();
		hijoActual.setHermanoDerecha(a);
		RESULT=as;

		}
	else{

	RESULT=a;
	
	}
:}
	| arg:a {:if(modoDepuracion) System.out.println("\t regla 2b"); 
 
	   RESULT=a;
	
:};
	

arg ::= tdato:t ID:var {:       
NodoIdentificador nodo = new NodoIdentificador(var.toString());
RESULT = new NodoDeclaracion(t,nodo);
 :};
	

cp ::= bloque:b {:

	RESULT=b;
:};

bloque     ::= BEGIN stmt_seq:s END{: 
if(modoDepuracion) System.out.println("\t regla 1"); 

RESULT = s;

:};



stmt_seq    ::= stmt_seq:ini stmt:sent 		SEMI	{:
	if(modoDepuracion) System.out.println("\t regla 2a");
	
NodoBase hijoActual = ini;

	if(hijoActual !=null){

		while(hijoActual.TieneHermano()){

		hijoActual = hijoActual.getHermanoDerecha();
		hijoActual.setHermanoDerecha(sent);
		RESULT=ini;

		}
	else{

	RESULT=sent;
	
	}
:}| stmt:sent			SEMI{:if(modoDepuracion) System.out.println("\t regla 2b"); 
 
	RESULT=sent;
	
:}| ;
:};//******************************************************************PUNTO1




vector ::= ID:var LCORC NUM:val RCORC {:  NodoValor nodo = new NodoValor(val);    
					  RESULT = new nodoIdentificador(var.toString(),nodo);      
:};


decl ::= tdato:t lista:l {:if(modoDepuracion) System.out.println("\t regla nueva1");
				RESULT new NodoDeclaracion(t,l);  
:} ;


lista ::= lista:l COMA ID:var {: if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
						NodoBase hijoActual = l;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(var);
							RESULT=l;
						}else{
							RESULT=var;
						}
						:}
	   | lista:l COMA vector:var {: if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
						NodoBase hijoActual = l;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(var);
							RESULT=l;
						}else{
							RESULT=var;
						}
						:}	
	   | ID:var	{: if(modoDepuracion) System.out.println("\t regla nueva 2b");
				RESULT = new NodoIdentificador(var.toString());
				:}
	   | vector:var	{: if(modoDepuracion) System.out.println("\t regla nueva 2b");
				RESULT = var;
:};


tdato:: = INT {: RESULT = "int"; :} | BOOL {: RESULT = "bool"; :} ;



llama_fun := ID:var LPAREN params:p RPAREN {:
                                         
						RESULT=new NodoLlamadaFuncion(var.toString(),p);
					:}
	 | ID LPAREN RPAREN  	{:
                                         
						RESULT=new NodoLlamadaFuncion(var.toString());
					:};

params::= params:p COMA exp:ex {: if(modoDepuracion) System.out.println("\t regla nueva 2a"); 
						NodoBase hijoActual = p;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ex);
							RESULT=p;
						}else{
							RESULT=ex;
						}
						:} 
	| exp:ex {: if(modoDepuracion) System.out.println("\t regla nueva 2b");
				RESULT = ex;
				:};


stmt        ::= if_stmt:sif	{:
	if(modoDepuracion) System.out.println("\t regla 3a");
	RESULT=sif;

:}
| repeat_stmt:srep{: 
	if(modoDepuracion) System.out.println("\t regla 3b"); 
	
	RESULT=srep;
:}
| assign_stmt:sasi{: 
	if(modoDepuracion) System.out.println("\t regla 3c");
	RESULT=sasi;
:}| read_stmt:slec{:
	if(modoDepuracion) System.out.println("\t regla 3d");
	RESULT=slec;

:}
| write_stmt:sesc{: 
	if(modoDepuracion) System.out.println("\t regla 3e"); 

	RESULT=sesc;

:}| decl:dec{:
	if(modoDepuracion) System.out.println("\t regla 3e"); 

	RESULT=dec;

:}| llama_fun:fun{:
	if(modoDepuracion) System.out.println("\t regla 3e"); 

	RESULT=fun;

:}| RETU exp:ex {:
	if(modoDepuracion) System.out.println("\t regla 3e"); 

	RESULT=new NodoReturn(ex);

:}| error{:
	if(modoDepuracion) System.out.println("\t regla 3f");
	System.out.println("Ocurrio error en cup # 0004");

	RESULT=null;
:};



for ::= FOR LPAREN assign_stmt:asig SEMI exp:ex SEMI assign_stmt:paso RPAREN stmt_seq:cuerpo END {:
	RESULT = new NodoForasig,ex,paso,cuerpo);
:};


if_stmt ::= IF exp:ex THEN stmt_seq:pthen END{:
	if(modoDepuracion) System.out.println("\t regla 4a");
 
	RESULT = new NodoIf(ex,pthen);

:}
| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END {:
	if(modoDepuracion) System.out.println("\t regla 4b");
	RESULT = new NodoIf(ex,pthen,pelse);
:};




repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{:
	if(modoDepuracion) System.out.println("\t regla 5");
	RESULT = new NodoRepeat(cuerpo,prueba); 

:};




assign_stmt ::= ID:variable LCORC exp:ex RCORC {:
	if(modoDepuracion) System.out.println("\t regla 6 parte del medio");/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				
	String nombre = variable.getName();*/

:}| exp:ex	{:
	if(modoDepuracion) System.out.println("\t regla 6 parte final");
	if(variable!=null)
	{
		NodoIdentificador nodo = new NodoIdentificador(variable.toString(),ex);
		RESULT = new NodoAsignacion(nodo,ex);
	}
	else{

		RESULT = null;
		System.out.println("Ocurrio error en cup # 0001");

	}
:}|ID:variable {:
	if(modoDepuracion) System.out.println("\t regla 6 parte del medio");/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				
	String nombre = variable.getName();*/

:};






read_stmt   ::= READ ID:variable {:
	if(modoDepuracion) System.out.println("\t regla 7"); 
	
	System.out.println("Leyendo Variable");
	
	if(variable!=null)
		RESULT = new NodoLeer(variable.toString());
	else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0002");

	}
:};




write_stmt  ::= WRITE exp:ex	{:
	if(modoDepuracion) System.out.println("\t regla 8");
		RESULT= new NodoEscribir(ex);

:};


exp ::= exp:exI OR exp2:exD {: RESULT = new NodoOperacion(exI,tipoOp.or,exD);  :}
	| exp2:ex {: RESULT = ex; :};

exp2 ::= exp2 AND exp3 {: RESULT = new NodoOperacion(exI,tipoOp.and,exD); :}
	| exp3:ex {: RESULT = ex; :};



exp3         ::= simple_exp:exI LTE simple_exp:exD{:
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.menor_igual,exD);
:} 
| simple_exp:exI RTE simple_exp:exD{:
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.mayor_igual,exD);
:} 
| simple_exp:exI DIF simple_exp:exD{:
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
:} 
| simple_exp:exI RT simple_exp:exD{:
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
:} 
| simple_exp:exI LT simple_exp:exD{:
	if(modoDepuracion) System.out.println("\t regla 9a");
	RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
:} 
| simple_exp:exI EQ simple_exp:exD	{:
	if(modoDepuracion) System.out.println("\t regla 9b");
	RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
:}| simple_exp:ex{:
	if(modoDepuracion) System.out.println("\t regla 9c");
	RESULT = ex;
:};




simple_exp  ::= simple_exp:exI PLUS term:exD	{:
	if(modoDepuracion) System.out.println("\t regla 10a");
	RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
:}| simple_exp:exI MINUS term:exD{:
	if(modoDepuracion) System.out.println("\t regla 10b");
	RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
:}| term:ex	{: 
	if(modoDepuracion) System.out.println("\t regla 10c");
	RESULT=ex;
:};




term        ::= term:exI TIMES factor:exD	{:
	if(modoDepuracion) System.out.println("\t regla 11a");
	RESULT = new NodoOperacion(exI,tipoOp.por,exD);
:}| term:exI OVER factor:exD	{: 
	if(modoDepuracion) System.out.println("\t regla 11b");
	RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
:}| factor:ex	{:
	if(modoDepuracion) System.out.println("\t regla 11c");
	RESULT=ex;

:};




factor      ::= LPAREN exp:ex RPAREN	{:
	if(modoDepuracion) System.out.println("\t regla 12a");
	RESULT = ex;
:}| NUM:valor	{: 
	if(modoDepuracion) System.out.println("\t regla 12b");
	System.out.println("Devolvi nodo numero entero");
	if(valor!=null){
		RESULT= new NodoValor(valor);		
	}else{
		RESULT = null;

		System.out.println("Ocurrio error en cup # 0005");
	}
:}| llama_fun:funex {:
	RESULT = funex;

:}| ID:var LCORC exp:ex RCORC {: 
RESULT= new NodoIdentificador(var.toString(),ex);	

:}| ID:variable	{:
	if(modoDepuracion) System.out.println("\t regla 12c"); 
	if(variable!=null){
		System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
		RESULT= new NodoIdentificador(variable.toString());
	}else{
		RESULT = null;
		System.out.println("Ocurrio error en cup # 0005");

	}
:}| error	{: 
	if(modoDepuracion) System.out.println("\t regla 12d");
	System.out.println("Ocurrio error en cup # 0003");
	
	RESULT=null;
	
:};
